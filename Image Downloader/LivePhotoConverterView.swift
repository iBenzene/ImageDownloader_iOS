//
//  LivePhotoConverterView.swift
//  Image Downloader
//
//  Created by ÂüÉËãØÊ≥Ω on 2025/8/6.
//

import SwiftUI
import PhotosUI

// MARK: - ÂÆûÂÜµÁÖßÁâáËΩ¨Êç¢Âô®ËßÜÂõæ
struct LivePhotoConverterView: View {
    @Environment(\.presentationMode) private var presentationMode
    
    // ÂºπÁ™óÂºÄÂÖ≥
    @State private var showCoverPicker = false
    @State private var showVideoPicker = false
    
    // ‰∏öÂä°Êï∞ÊçÆ
    @State private var coverUrl: URL?
    @State private var videoUrl: URL?
    
    // UI Áä∂ÊÄÅ
    @State private var isProcessing = false
    @State private var alertMsg    = ""
    @State private var showAlert   = false
    
    // iOS 16 ÂéüÁîü PhotosPicker ÁöÑÈÄâ‰∏≠È°π
    @State private var coverItem: PhotosPickerItem?
    @State private var videoItem: PhotosPickerItem?
    
    var body: some View {
        ZStack {
            Color(.systemBackground)
                .edgesIgnoringSafeArea(.horizontal)
            
            // ÊòæÁ§∫ÁÖßÁâáÔºàÂÖ®Â±èÈì∫Êª°Ôºâ
            if let coverUrl = coverUrl,
               let image = UIImage(contentsOfFile: coverUrl.path) {
                
                GeometryReader { proxy in
                    let fullWidth = proxy.size.width           // ÂèØÁî®ÂÆΩÂ∫¶ÔºàÂê´ÂÆâÂÖ®Âå∫Ôºâ
                    
                    Image(uiImage: image)
                        .resizable()
                        .aspectRatio(contentMode: .fit)        // ‰øùÊåÅÊØî‰æã, ‰∏î‰∏çË£ÅÂàá
                        .frame(width: fullWidth)               // ÂÆΩÂ∫¶Âç†Êª°
                        .position(x: fullWidth / 2,            // ÂûÇÁõ¥ÊñπÂêëÂ±Ö‰∏≠ÊòæÁ§∫
                                  y: proxy.size.height / 2)
                }
                .background(Color(.systemBackground))          // Ââ©‰ΩôÂå∫Âüü‰∏éÁ≥ªÁªüËÉåÊôØÂêåËâ≤
                .transition(.opacity)
            } else {
                // Â∞öÊú™ÈÄâÊã©Â∞ÅÈù¢Êó∂ÁöÑÂç†‰Ωç
                VStack(spacing: 12) {
                    Image(systemName: "photo.on.rectangle")
                        .font(.system(size: 72))
                        .foregroundColor(.secondary)
                    Text("ËØ∑ÂÖàÈÄâÊã©ÂÆûÂÜµÂ∞ÅÈù¢")
                        .foregroundColor(.secondary)
                }.contentShape(Rectangle()) // ‰ΩøÊï¥‰∏™Âç†‰ΩçÂå∫ÂüüÂèØÁÇπÂáª
                    .onTapGesture {
                        withAnimation(.easeIn(duration: 0.2)) {
                            showCoverPicker = true // ÂÜçÊ¨°ÂºπÂá∫Â∞ÅÈù¢ÈÄâÊã©Âô®
                        }
                    }
            }
            
            // „ÄåÂêàÊàê‰∏≠„ÄçÊµÆÂ±Ç
            if isProcessing {
                ProgressView("ÂêàÊàê‰∏≠...")
                    .padding(.horizontal, 32)
                    .padding(.vertical, 14)
                    .background(.ultraThinMaterial, in: RoundedRectangle(cornerRadius: 14))
            }
        }
        .navigationBarTitle("ÂÆûÂÜµÂõæÁâáËΩ¨Êç¢Âô®", displayMode: .inline)
        .navigationBarItems(trailing: trailingBarItem)
        .onAppear {
            cleanupWorkDir() // È°µÈù¢Âä†ËΩΩÊó∂Ê∏ÖÁêÜ‰∏ÄÊ¨°ÁºìÂ≠ò
            if coverUrl == nil {
                showCoverPicker = true // ËøõÂÖ•È°µÈù¢Êó∂, Á´ãÂç≥ÈÄâÊã©Â∞ÅÈù¢
            }
        }
        .onDisappear {
            // È°µÈù¢ÈÄÄÂá∫Êó∂Ê∏ÖÁêÜ‰∏ÄÊ¨°ÁºìÂ≠ò
            cleanupWorkDir()
        }
        // iOS16 ÂéüÁîü PhotosPicker
        .photosPicker(
            isPresented: $showCoverPicker,
            selection: $coverItem,
            matching: .images
        )
        .photosPicker(
            isPresented: $showVideoPicker,
            selection: $videoItem,
            matching: .videos
        )
        // ÁõëÂê¨Â∞ÅÈù¢ÂíåËßÜÈ¢ëÁöÑÈÄâÂèñ
        .onChange(of: coverItem) { newItem in
            guard newItem != nil else { return }
            Task { await handlePickerResults(newItem, isCover: true) }
        }
        .onChange(of: videoItem) { newItem in
            guard newItem != nil else { return }
            Task { await handlePickerResults(newItem, isCover: false) }
        }
        // ËΩ¨Êç¢ÂÆåÊàêÂêéÁöÑÂºπÁ™ó
        .alert(isPresented: $showAlert) {
            Alert(title: Text(alertMsg),
                  dismissButton: .default(Text("Â•ΩÁöÑ")) {
                presentationMode.wrappedValue.dismiss() // ËøîÂõû‰∏ªÈ°µ
            })
        }
    }
    
    // ‰ªÖÂú®ÈÄâÂÆåÂ∞ÅÈù¢ÂêéÊòæÁ§∫„Äå‰∏ã‰∏ÄÊ≠•„ÄçÊåâÈíÆ
    @ViewBuilder
    private var trailingBarItem: some View {
        if coverUrl != nil && videoUrl == nil {
            Button("‰∏ã‰∏ÄÊ≠•") { showVideoPicker = true }
        }
    }
    
    // Â§ÑÁêÜÈÄâÂèñÁªìÊûú
    private func handlePickerResults(_ item: PhotosPickerItem?, isCover: Bool) async {
        guard let item else { return }
        do {
            if let data = try await item.loadTransferable(type: Data.self) {
                let dir = try workDir()
                let filename = await item.itemIdentifier()
                let dstUrl = dir.appendingPathComponent(filename)
                
                try? FileManager.default.removeItem(at: dstUrl)
                try data.write(to: dstUrl)
                
                if isCover {
                    coverUrl = dstUrl
                } else {
                    videoUrl = dstUrl
                    startConvert()
                }
            }
        } catch {
            alertMsg = "ËØªÂèñÈÄâÂèñÁöÑÈ°πÁõÆÂ§±Ë¥•Ôºö\(error.localizedDescription)"
            showAlert = true
        }
    }
    
    // ÂêàÊàê Live Photo, Âπ∂‰øùÂ≠òÂà∞Áõ∏ÂÜå
    private func startConvert() {
        guard let cover = coverUrl, let video = videoUrl else { return }
        isProcessing = true
        
        let helper = LivePhotoHelper()
        helper.saveLivePhoto(cover, videoUrl: video) { success, error in
            DispatchQueue.main.async {
                isProcessing = false
                alertMsg = success ? "ÂÆûÂÜµÁÖßÁâáÂ∑≤‰øùÂ≠ò üéâ" :
                (error?.localizedDescription ?? "ÂÆûÂÜµÁÖßÁâáÂêàÊàêÂ§±Ë¥• ‚ùå")
                showAlert = true
            }
        }
    }
}

private extension PhotosPickerItem {
    func itemIdentifier() async -> String {
        if let utType = self.supportedContentTypes.first {
            let ext = utType.preferredFilenameExtension ?? "bin"
            return UUID().uuidString + "." + ext
        }
        return UUID().uuidString
    }
}

// MARK: - ‰∏¥Êó∂Êñá‰ª∂ÁÆ°ÁêÜÂ∑•ÂÖ∑
private let workDirName = "LivePhotoWork"

private func workDir() throws -> URL {
    let base = FileManager.default.temporaryDirectory.appendingPathComponent(workDirName, isDirectory: true)
    if !FileManager.default.fileExists(atPath: base.path) {
        try FileManager.default.createDirectory(at: base, withIntermediateDirectories: true)
    }
    return base
}

private func cleanupWorkDir() {
    let base = FileManager.default.temporaryDirectory.appendingPathComponent(workDirName, isDirectory: true)
    try? FileManager.default.removeItem(at: base)
    print("‚ôªÔ∏è Ê∏ÖÁêÜÁºìÂ≠òÔºö\(base.path)")
}

// MARK: - È¢ÑËßà
struct LivePhotoConverterView_Previews: PreviewProvider {
    static var previews: some View {
        LivePhotoConverterView()
    }
}
